!function e(t,n,r){function i(c,f){if(!n[c]){if(!t[c]){var a="function"==typeof require&&require;if(!f&&a)return a(c,!0);if(o)return o(c,!0);var u=new Error("Cannot find module '"+c+"'");throw u.code="MODULE_NOT_FOUND",u}var l=n[c]={exports:{}};t[c][0].call(l.exports,function(e){var n=t[c][1][e];return i(n?n:e)},l,l.exports,e,t,n,r)}return n[c].exports}for(var o="function"==typeof require&&require,c=0;c<r.length;c++)i(r[c]);return i}({1:[function(e,t,n){t.exports={"default":e("core-js/library/fn/object/define-property"),__esModule:!0}},{"core-js/library/fn/object/define-property":3}],2:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}n.__esModule=!0;var i=e("../core-js/object/define-property"),o=r(i);n["default"]=function(e,t,n){return t in e?(0,o["default"])(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}},{"../core-js/object/define-property":1}],3:[function(e,t,n){e("../../modules/es6.object.define-property");var r=e("../../modules/_core").Object;t.exports=function(e,t,n){return r.defineProperty(e,t,n)}},{"../../modules/_core":6,"../../modules/es6.object.define-property":19}],4:[function(e,t,n){t.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},{}],5:[function(e,t,n){var r=e("./_is-object");t.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},{"./_is-object":15}],6:[function(e,t,n){var r=t.exports={version:"2.4.0"};"number"==typeof __e&&(__e=r)},{}],7:[function(e,t,n){var r=e("./_a-function");t.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,i){return e.call(t,n,r,i)}}return function(){return e.apply(t,arguments)}}},{"./_a-function":4}],8:[function(e,t,n){t.exports=!e("./_fails")(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},{"./_fails":11}],9:[function(e,t,n){var r=e("./_is-object"),i=e("./_global").document,o=r(i)&&r(i.createElement);t.exports=function(e){return o?i.createElement(e):{}}},{"./_global":12,"./_is-object":15}],10:[function(e,t,n){var r=e("./_global"),i=e("./_core"),o=e("./_ctx"),c=e("./_hide"),f="prototype",a=function(e,t,n){var u,l,s,d=e&a.F,h=e&a.G,p=e&a.S,y=e&a.P,v=e&a.B,b=e&a.W,_=h?i:i[t]||(i[t]={}),w=_[f],m=h?r:p?r[t]:(r[t]||{})[f];h&&(n=t);for(u in n)l=!d&&m&&void 0!==m[u],l&&u in _||(s=l?m[u]:n[u],_[u]=h&&"function"!=typeof m[u]?n[u]:v&&l?o(s,r):b&&m[u]==s?function(e){var t=function(t,n,r){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,n)}return new e(t,n,r)}return e.apply(this,arguments)};return t[f]=e[f],t}(s):y&&"function"==typeof s?o(Function.call,s):s,y&&((_.virtual||(_.virtual={}))[u]=s,e&a.R&&w&&!w[u]&&c(w,u,s)))};a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,a.U=64,a.R=128,t.exports=a},{"./_core":6,"./_ctx":7,"./_global":12,"./_hide":13}],11:[function(e,t,n){t.exports=function(e){try{return!!e()}catch(t){return!0}}},{}],12:[function(e,t,n){var r=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=r)},{}],13:[function(e,t,n){var r=e("./_object-dp"),i=e("./_property-desc");t.exports=e("./_descriptors")?function(e,t,n){return r.f(e,t,i(1,n))}:function(e,t,n){return e[t]=n,e}},{"./_descriptors":8,"./_object-dp":16,"./_property-desc":17}],14:[function(e,t,n){t.exports=!e("./_descriptors")&&!e("./_fails")(function(){return 7!=Object.defineProperty(e("./_dom-create")("div"),"a",{get:function(){return 7}}).a})},{"./_descriptors":8,"./_dom-create":9,"./_fails":11}],15:[function(e,t,n){t.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},{}],16:[function(e,t,n){var r=e("./_an-object"),i=e("./_ie8-dom-define"),o=e("./_to-primitive"),c=Object.defineProperty;n.f=e("./_descriptors")?Object.defineProperty:function(e,t,n){if(r(e),t=o(t,!0),r(n),i)try{return c(e,t,n)}catch(f){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},{"./_an-object":5,"./_descriptors":8,"./_ie8-dom-define":14,"./_to-primitive":18}],17:[function(e,t,n){t.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},{}],18:[function(e,t,n){var r=e("./_is-object");t.exports=function(e,t){if(!r(e))return e;var n,i;if(t&&"function"==typeof(n=e.toString)&&!r(i=n.call(e)))return i;if("function"==typeof(n=e.valueOf)&&!r(i=n.call(e)))return i;if(!t&&"function"==typeof(n=e.toString)&&!r(i=n.call(e)))return i;throw TypeError("Can't convert object to primitive value")}},{"./_is-object":15}],19:[function(e,t,n){var r=e("./_export");r(r.S+r.F*!e("./_descriptors"),"Object",{defineProperty:e("./_object-dp").f})},{"./_descriptors":8,"./_export":10,"./_object-dp":16}],20:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function i(e){return e*e}function o(e){return"number"==typeof e?e?e<0?-1:1:e===e?0:NaN:NaN}function c(e,t,n,r,i,o,c){switch(c){case 0:e.fillRect(t,n,r,o),e.fillRect(t,n+i-o,r,o),e.fillRect(t,n,o,i),e.fillRect(t+r-o,n,o,i);break;case 1:e.fillRect(t,n,r/2+o/2,o),e.fillRect(t+r/2-o/2,n,o,i),e.fillRect(t,n+i-o,r,o);break;case 2:e.fillRect(t,n,r,o),e.fillRect(t,n+(i-o)/2,r,o),e.fillRect(t,n+(i-o),r,o),e.fillRect(t+(r-o),n,o,(i+o)/2),e.fillRect(t,n+(i-o)/2,o,(i+o)/2);break;case 3:e.fillRect(t,n,r,o),e.fillRect(t,n+(i-o),r,o),e.fillRect(t+r/5,n+(i-o)/2,4*r/5,o),e.fillRect(t+(r-o),n,o,i);break;case 4:e.fillRect(t,n+(i-o)/2,r,o),e.fillRect(t,n,o,(i+o)/2),e.fillRect(t+(r-o),n,o,i);break;case 5:e.fillRect(t,n,r,o),e.fillRect(t,n+(i-o)/2,r,o),e.fillRect(t,n+(i-o),r,o),e.fillRect(t,n,o,(i+o)/2),e.fillRect(t+(r-o),n+(i-o)/2,o,(i+o)/2);break;case 6:e.fillRect(t,n,r,o),e.fillRect(t,n+(i-o)/2,r,o),e.fillRect(t,n+(i-o),r,o),e.fillRect(t,n,o,i),e.fillRect(t+(r-o),n+(i-o)/2,o,(i+o)/2);break;case 7:e.fillRect(t,n,4*r/5+o/2,o),e.fillRect(t+(4*r/5-o/2),n,o,i),e.fillRect(t+(r-o)/2,n+(i-o)/2,(r+o)/2,o);break;case 8:e.fillRect(t,n,r,o),e.fillRect(t,n+(i-o)/2,r,o),e.fillRect(t,n+(i-o),r,o),e.fillRect(t,n,o,i),e.fillRect(t+(r-o),n,o,i);break;case 9:e.fillRect(t,n,r,o),e.fillRect(t,n+(i-o)/2,r,o),e.fillRect(t+(r-o),n,o,i),e.fillRect(t,n,o,(i+o)/2)}}var f=e("babel-runtime/helpers/defineProperty"),a=r(f),u=e("jquery"),l=window.CanvasRenderingContext2D&&CanvasRenderingContext2D.prototype;l&&l.lineTo&&(l.dashedLine=function(e,t,n,r,i){i||(i=[10,5]),this.moveTo(e,t);var c=n-e,f=r-t;0===c&&(c=1e-15);for(var a=f/c,u=Math.sqrt(c*c+f*f),l=0,s=!0;u>=.1;){var d=Math.min(i[l%i.length],u);0==d&&(d=.001);var h=o(c)*d/Math.sqrt(1+a*a);e+=h,t+=a*h,this[s?"lineTo":"moveTo"](e,t),u-=d,s=!s,++l}}),u(document).ready(function(){var e=function(e){u("#pause").show(),e.running=!1},t=function(e){u("#pause").hide(),setTimeout(function(){e.running=!0},400)},n=function(){p.running=!0,p.newGame=!1,G();for(var e=0;e<M.length;++e)M[e]=0;u("#newgame").hide(),u("#pause").hide()},r=function(){var r=this;this.direction=[0,0],this.running=!1,this.newGame=!0,u("body").keydown(function(i){var o=!0;switch(i.which){case 38:r.direction[1]=-1;break;case 40:r.direction[1]=1;break;case 87:r.direction[0]=-1;break;case 83:r.direction[0]=1;break;default:o=!1}o&&i.preventDefault(),80===i.which?r.running?e(r):t(r):13===i.which&&r.newGame&&n()}).keyup(function(e){switch(e.which){case 38:r.direction[1]===-1&&(r.direction[1]=0);break;case 40:1===r.direction[1]&&(r.direction[1]=0);break;case 87:r.direction[0]===-1&&(r.direction[0]=0);break;case 83:1===r.direction[0]&&(r.direction[0]=0)}})},f=function(e,t){this.id=0,this.set(e,t)};f.prototype.set=function(e,t){"function"==typeof e&&("undefined"==typeof t&&(t=1e3),this.id&&clearInterval(this.id),this.id=setInterval(e,t))},f.prototype.clear=function(){0!==this.id&&(clearInterval(this.id),this.id=0)};var l=function(e,t){"function"!=typeof e?this.reset=function(){return this.x=e,this.y=t,this}:this.reset=function(){return e(this,arguments)},this.reset()},s=1.61803398875,d=0,h=60,p=new r,y=u("#map");y[0].width=y.parent().width(),y[0].height=y.parent().height();var v=y[0].height,b=y[0].width,_=y[0].getContext("2d"),w=[new l(3*v/100,v/2),new l(b-3*v/100,v/2)],m=[0,0],R=3*Math.sqrt(v),g=v/50,x=[!1,!1],j=.075*Math.pow(v,.75),M=[0,0],k=0,T=!1,P=.5,C=new l(b/2,v/2),q=v/40,E=new l(function(e){("undefined"==typeof e.dir||!e.dir||1!==e.dir&&e.dir!==-1)&&(e.dir=2*(Math.random()<.5)-1);var t=Math.atan2((R+q)/2.1,b/2-v/25-q/2),n=b/150,r=t*(Math.random()-.5);return e.x=n*Math.cos(r)*e.dir,e.y=n*Math.sin(r),e.dir=0,e}),O=b/125e3,S=!1,G=function(){C.reset(),E.reset();for(var e=0;e<w.length;++e)w[e].reset()},I=function(e,t,n){x[n]=t,t?e.html("CPU (CLICK TO CHANGE)"):e.html("PLAYER (CLICK TO CHANGE)")};I(u("#cpu1"),!0,0),I(u("#cpu2"),!1,1),u("#cpu1").click(function(){I(u(this),!x[0],0)}),u("#cpu2").click(function(){I(u(this),!x[1],1)}),u("#begin").click(function(){n()}),u("#restart").click(function(){u("#pause").hide(),p.newGame=!0,u("#newgame").show()}),u("#restartWin").click(function(){u("#winner").hide(),p.newGame=!0,u("#newgame").show()}),u("#resume").click(function(){t(p)});for(var N=function(e){var t=!1,n=function r(e){if(t){var n=e?"black":"white";t.css({color:n});var i=300;setTimeout(function(){r(!e)},i)}};e.mouseover(function(){t=u(this);var e=!0;n(e)}).mouseout(function(){t=!1,u(this).css({color:""})})},L=0;L<u(".select").length;++L)N(u(u(".select")[L]));var D=function(){for(var e=0;e<M.length;++e)10==M[e]&&(u("#winName").html(0==e?"Left":"Right"),u("#winner").show(),p.running=!1)},F=function(e){var t=E,n=(t.x,C),r=w[e].y-n.y,c=R/2+q/2,f=Math.atan(-t.y/Math.abs(t.x)),a=r/c,u=(Math.PI/2,o(t.x)*(-a*Math.PI-6*f)/8),l=Math.tan(u);E.x=-o(t.x)*Math.sqrt((i(t.x)+i(t.y))/(1+i(l))),E.y=-l*E.x},U=function(){_.fillStyle="white",_.strokeStyle="white",_.lineWidth=v/75,_.fillRect(v/50,v/50,b-v/25,v/50),_.fillRect(v/50,48*v/50,b-v/25,v/50),_.beginPath(),_.dashedLine(b/2,4*v/75,b/2,71*v/75,[v/75]),_.stroke()};U();var A=document.createElement("img");A.onload=function(){S=A},A.src=y[0].toDataURL("image/png");var W=60,z=7,B=u("#characterTest"),H=function K(e,t){B.css({"font-size":e});var n=u("#characterTest").width(),r=n*W,i=v*(6+5*s)/50,o=v-1.5*i;if(r>=4*b/5)K(e/2,t);else{for(;o<e*t*z;){if(t<=1.2)return void K(e/2,1.2);t-=.2}u(".menu").css((0,a["default"])({left:(b-r)/2,top:i,width:r,"font-size":e,"line-height":t},"width",r));var c=Math.min(35/18*t*e,2*e);u(".large").css({"font-size":c,"line-height":Math.min(7*t/3*e/c,2)}),u("#characterTest").remove()}};H(25,2),setInterval(function(){if(p.running)if(k>=0)k-=1/(h*P),k<.5&&!T&&(G(),T=!0);else{var e=function(e){E[e]*=1+Math.abs(O/E.x),C[e]+=E[e]};e("x"),e("y"),(E.y>0&&C.y+q/2>24*v/25||E.y<0&&C.y-q/2<v/25)&&(E.y=-E.y),E.x<0?C.x<=v/25+q/2&&(C.y+q/2>w[0].y-R/2&&C.y-q/2<w[0].y+R/2?F(0):(k=1,T=!1,E.dir=1,++M[1],D())):C.x>=b-v/25-q/2&&(C.y+q/2>w[1].y-R/2&&C.y-q/2<w[1].y+R/2?F(1):(k=1,T=!1,E.dir=-1,++M[0],D()));for(var t=0;t<w.length;++t){var n,r,i,o=j;if(x[t]){n=C.y<w[t].y?-1:1;var f=Math.abs(C.y-w[t].y)/v,a=1-Math.abs(C.x-w[t].x)/b;r=f*Math.sqrt(a),i=m[t],o*=.66}else n=p.direction[t],r=.2,i=n;i<=0&&w[t].y-R/2<2*v/50+3*q/2?(m[t]=0,x[t]&&(w[t].y=2*v/50+3*q/2+R/2)):i>=0&&w[t].y+R/2>48*v/50-3*q/2?(m[t]=0,x[t]&&(w[t].y=48*v/50-3*q/2-R/2)):(m[t]*=1-r,m[t]+=r*n,w[t].y+=o*m[t])}}_.fillStyle="rgba(0,0,0,0.91)",_.fillRect(0,0,b,v),S?_.drawImage(S,0,0):U(),_.fillStyle="white";for(var t=0;t<w.length;++t)_.fillRect(w[t].x-g/2,w[t].y-R/2,g,R);var u=1*v/10,l=s*u,y=1.5*v/150;10!==M[0]&&10!==M[1]?(c(_,11*b/25-3*v/50,2*v/25,u,l,y,M[0]),c(_,14*b/25,2*v/25,u,l,y,M[1])):10===M[0]?(c(_,11*b/25-3*v/50-1.1*u,2*v/25,u,l,y,1),c(_,11*b/25-3*v/50,2*v/25,u,l,y,0),c(_,14*b/25,2*v/25,u,l,y,M[1])):10===M[1]&&(c(_,11*b/25-3*v/50,2*v/25,u,l,y,M[0]),c(_,14*b/25,2*v/25,u,l,y,1),c(_,14*b/25+1.1*u,2*v/25,u,l,y,0)),_.fillStyle=k>0&&k%.2>=.1?"red":"white",_.fillRect(C.x-q/2,C.y-q/2,q,q),++d},1e3/h)})},{"babel-runtime/helpers/defineProperty":2,jquery:"jquery"}]},{},[20]);
/*# sourceMappingURL=data:application/json;base64, */
